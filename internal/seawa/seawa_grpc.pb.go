// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: seawa/seawa.proto

package seawa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeaWatcher_GetItemListedEvents_FullMethodName = "/seawatcher.SeaWatcher/GetItemListedEvents"
)

// SeaWatcherClient is the client API for SeaWatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeaWatcherClient interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	// rpc GetEvents(SubscriptionRequest) returns (stream OpenSeaEvent) {}
	GetItemListedEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SeaWatcher_GetItemListedEventsClient, error)
}

type seaWatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewSeaWatcherClient(cc grpc.ClientConnInterface) SeaWatcherClient {
	return &seaWatcherClient{cc}
}

func (c *seaWatcherClient) GetItemListedEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SeaWatcher_GetItemListedEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeaWatcher_ServiceDesc.Streams[0], SeaWatcher_GetItemListedEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &seaWatcherGetItemListedEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeaWatcher_GetItemListedEventsClient interface {
	Recv() (*ItemListed, error)
	grpc.ClientStream
}

type seaWatcherGetItemListedEventsClient struct {
	grpc.ClientStream
}

func (x *seaWatcherGetItemListedEventsClient) Recv() (*ItemListed, error) {
	m := new(ItemListed)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeaWatcherServer is the server API for SeaWatcher service.
// All implementations must embed UnimplementedSeaWatcherServer
// for forward compatibility
type SeaWatcherServer interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	// rpc GetEvents(SubscriptionRequest) returns (stream OpenSeaEvent) {}
	GetItemListedEvents(*SubscriptionRequest, SeaWatcher_GetItemListedEventsServer) error
	mustEmbedUnimplementedSeaWatcherServer()
}

// UnimplementedSeaWatcherServer must be embedded to have forward compatible implementations.
type UnimplementedSeaWatcherServer struct {
}

func (UnimplementedSeaWatcherServer) GetItemListedEvents(*SubscriptionRequest, SeaWatcher_GetItemListedEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItemListedEvents not implemented")
}
func (UnimplementedSeaWatcherServer) mustEmbedUnimplementedSeaWatcherServer() {}

// UnsafeSeaWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeaWatcherServer will
// result in compilation errors.
type UnsafeSeaWatcherServer interface {
	mustEmbedUnimplementedSeaWatcherServer()
}

func RegisterSeaWatcherServer(s grpc.ServiceRegistrar, srv SeaWatcherServer) {
	s.RegisterService(&SeaWatcher_ServiceDesc, srv)
}

func _SeaWatcher_GetItemListedEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeaWatcherServer).GetItemListedEvents(m, &seaWatcherGetItemListedEventsServer{stream})
}

type SeaWatcher_GetItemListedEventsServer interface {
	Send(*ItemListed) error
	grpc.ServerStream
}

type seaWatcherGetItemListedEventsServer struct {
	grpc.ServerStream
}

func (x *seaWatcherGetItemListedEventsServer) Send(m *ItemListed) error {
	return x.ServerStream.SendMsg(m)
}

// SeaWatcher_ServiceDesc is the grpc.ServiceDesc for SeaWatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeaWatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seawatcher.SeaWatcher",
	HandlerType: (*SeaWatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemListedEvents",
			Handler:       _SeaWatcher_GetItemListedEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "seawa/seawa.proto",
}
