{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"gloomberg","text":""},{"location":"#commands","title":"commands","text":"<ul> <li><code>live</code> - Create a new project.</li> </ul>"},{"location":"#commands-after-split-up-wip","title":"commands after split up (WIP)","text":"<p>-&gt; feel free to propose better names</p> <ul> <li><code>bridge</code> - bridge events (sales, listings, ...) from the OpenSea API &amp; Ethereum nodes to the redis database.</li> <li>receives events from the OpenSea API and pushes them to the redis database.</li> <li>receives logs from the websockets API of ethereum nodes (geth for example) and pushes them to the redis database.</li> <li><code>watch</code> - like <code>live</code> or the \"reverse\"/\"other side\" of the <code>bridge</code> command.</li> <li>watches the redis database for new events and logs and prints them to the terminal</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>cmd/          # Commands for gloomberg\n    live/     # ...\n    os2rdb/   # Receives events from the OpenSea API and pushes them to the redis database.\n    node2rdb/ # Receives logs from the websockets API of ethereum nodes and pushes them to the redis database.\nddt/          # Newer implementation of most stuff\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"data/listings/","title":"Listings","text":"<p>As listings are usually not on-chain, we need to get them from the marketplace APIs.</p>"},{"location":"data/listings/#implemented-sources-for-listings","title":"implemented sources for listings","text":"<ul> <li>OpenSea (StreamAPI/WS)</li> </ul>"},{"location":"data/listings/#todo","title":"Todo","text":"<ul> <li>get Blur listings (API?!)</li> <li>get X2Y2 listings (API &amp; key available already)</li> </ul>"},{"location":"data/listings/#distribution","title":"distribution","text":"<p>see pubsub docs for details</p> <p>listings can be pushed to a redis pubsub channel, so that possible other instances can subscribe to it and get the listings without having to query the APIs themselves.</p>"},{"location":"data/listings/#storage","title":"storage","text":"<p>Currently, we do not store listings in the database, but we might want to do so in the future.</p>"},{"location":"data/pubsub/","title":"Publish/Subscribe","text":"<p>we use a redis pubsub channel to distribute data across instances.</p>"},{"location":"data/pubsub/#channels","title":"channels","text":"<ul> <li><code>rawListings</code> - contains all listings from all sources without any modifications (as JSON strings)</li> </ul>"},{"location":"data/pubsub/#ideas-for-future-channels","title":"ideas for future channels","text":"<ul> <li><code>listings</code> - contains all listings from all sources as <code>ListingEvent</code> objects.   This channel could be used by the frontends to display listings.</li> <li><code>rawSales</code> - contains all sales from all sources without any modifications (as JSON strings)</li> <li><code>sales</code> - contains all sales from all sources as <code>SaleEvent</code> objects.   This channel could be used by the frontends to display listings.</li> </ul>"}]}