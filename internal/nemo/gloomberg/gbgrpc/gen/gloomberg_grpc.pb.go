// dakma-dev | gloomberg.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: internal/nemo/gloomberg/gbgrpc/gen/gloomberg.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gloomberg_Subscribe_FullMethodName = "/gen.Gloomberg/Subscribe"
	Gloomberg_GetEvents_FullMethodName = "/gen.Gloomberg/GetEvents"
)

// GloombergClient is the client API for Gloomberg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GloombergClient interface {
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Gloomberg_GetEventsClient, error)
}

type gloombergClient struct {
	cc grpc.ClientConnInterface
}

func NewGloombergClient(cc grpc.ClientConnInterface) GloombergClient {
	return &gloombergClient{cc}
}

func (c *gloombergClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gloomberg_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gloombergClient) GetEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Gloomberg_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gloomberg_ServiceDesc.Streams[0], Gloomberg_GetEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gloombergGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gloomberg_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type gloombergGetEventsClient struct {
	grpc.ClientStream
}

func (x *gloombergGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GloombergServer is the server API for Gloomberg service.
// All implementations must embed UnimplementedGloombergServer
// for forward compatibility
type GloombergServer interface {
	Subscribe(context.Context, *SubscriptionRequest) (*emptypb.Empty, error)
	GetEvents(*SubscriptionRequest, Gloomberg_GetEventsServer) error
	mustEmbedUnimplementedGloombergServer()
}

// UnimplementedGloombergServer must be embedded to have forward compatible implementations.
type UnimplementedGloombergServer struct {
}

func (UnimplementedGloombergServer) Subscribe(context.Context, *SubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedGloombergServer) GetEvents(*SubscriptionRequest, Gloomberg_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedGloombergServer) mustEmbedUnimplementedGloombergServer() {}

// UnsafeGloombergServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GloombergServer will
// result in compilation errors.
type UnsafeGloombergServer interface {
	mustEmbedUnimplementedGloombergServer()
}

func RegisterGloombergServer(s grpc.ServiceRegistrar, srv GloombergServer) {
	s.RegisterService(&Gloomberg_ServiceDesc, srv)
}

func _Gloomberg_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GloombergServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gloomberg_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GloombergServer).Subscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gloomberg_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GloombergServer).GetEvents(m, &gloombergGetEventsServer{stream})
}

type Gloomberg_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type gloombergGetEventsServer struct {
	grpc.ServerStream
}

func (x *gloombergGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Gloomberg_ServiceDesc is the grpc.ServiceDesc for Gloomberg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gloomberg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Gloomberg",
	HandlerType: (*GloombergServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Gloomberg_Subscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _Gloomberg_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/nemo/gloomberg/gbgrpc/gen/gloomberg.proto",
}
